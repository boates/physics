#!/usr/bin/env python
"""
molecules_from_centers.py
Author: Brian Boates

Read in a POSCAR of molecular centers
Return a POSCAR of molecules about those centers
"""
import os, sys, commands, glob, numpy

def main():

    # Retrieve user input
    try:
        pos = open(sys.argv[1],'r')
    except:
        print '\n usage: '+sys.argv[0]+' POSCAR_of_molecular_centers\n'
        sys.exit(0)

    # Read the POSCAR header info
    line1 = pos.readline()
    line2 = pos.readline()
    line3 = pos.readline()
    line4 = pos.readline()
    line5 = pos.readline()
    line6 = pos.readline()
    line7 = pos.readline()

    alat = float(line2.strip())
    ax, ay, az = line3.split()
    bx, by, bz = line4.split()
    cx, cy, cz = line5.split()
    natom = int(line6.strip())

    # Create output POSCAR and write header
    out = open('POSCAR.molecules','w')
    out.write(line1.strip()+' generated by molecules_from_centers.py\n')
    out.write(line2)
    out.write(line3)
    out.write(line4)
    out.write(line5)
    out.write(' '+str(natom*2)+'\n')
    out.write(line7)

    # Create the lattice vectors
    ax, ay, az = float(ax)*alat, float(ay)*alat, float(az)*alat
    bx, by, bz = float(bx)*alat, float(by)*alat, float(bz)*alat
    cx, cy, cz = float(cx)*alat, float(cy)*alat, float(cz)*alat

    # Define the lattice space and get the inverse
    space = numpy.matrix([ [ax,ay,az], [bx,by,bz], [cx,cy,cz] ])
    inverse = space.I

    # Choose displacement vectors for molecular ions and invert
    bond_length = 1.10
    shift1 = [bond_length/2.0, 0.0, 0.0]   *inverse
    shift2 = [-bond_length/2.0, 0.0, 0.0]  *inverse

    shift1 = [shift1.item(0),shift1.item(1),shift1.item(2)]
    shift2 = [shift2.item(0),shift2.item(1),shift2.item(2)]

    # Create and write molecular coordinates from centers
    for i in range(natom):
        x, y, z = pos.readline().split()
        out.write(' '+str(float(x)+shift1[0]))
        out.write(' '+str(float(y)+shift1[1]))
        out.write(' '+str(float(z)+shift1[2]))
        out.write('\n')
        out.write(' '+str(float(x)+shift2[0]))
        out.write(' '+str(float(y)+shift2[1]))
        out.write(' '+str(float(z)+shift2[2]))
        out.write('\n')

    out.close()
        
#        x.append(float(line[0])*ax + float(line[1])*bx + float(line[2])*cx)
#        y.append(float(line[0])*ay + float(line[1])*by + float(line[2])*cy)
#        z.append(float(line[0])*az + float(line[1])*bz + float(line[2])*cz)                        


if __name__ == '__main__':
    main()
